useEffect is called after the initial render --> so we use to do all the actions which we want to do after the initial render.

Never create component inside component.
Never write useState inside IF condition
React doesn't like inconsistency and its not optimized way to write 
Never write useState in for loop condition

we can create multiple useEffect inside our component

Be concious about which package to use for the application

createBrowserRouter: used to define routes inside this --> it takes configuration as array of objects
const approuter = createBrowserRouter([
    {path: '/',
    element: <component/>} ,
    {},...])

    RouterProvider --> we need to provide router to root render to render the application 
    root.render(<RouterProvider router={approuter} />)

SPA -- Single Page Application

2 sides of routing --> 1) Client Side Routing 2) Server Side Routing

client side routing --> doesn't fetch the component from server , its already written code for compoenent in application , we are using it.


to read dynamicId we use useParams hook
to read error from error Element we use useRouteError

 benefits of using Component structure in react and splitting code 
--> Modular, readable,reusable,testable, maintainable

 config driven routes , config driven UI

 WHy Hooks:
hooks are normal functions , we use hooks to export some logic from that function.

code modularity means --> Breaking code into smaller chunks
readability and reusability and code maintainability

Lazy loading is the practice of delaying load or initialization of resources or objects until they're actually needed to improve performance and save system resources.

//with the bundling of the code , will also do 
1) bundle chunking
2) Code splitting
3)Lazy loading
4)dynamic loading
5)on Demand loading
6) Dynamic import
of the code--> this will help in system design interview

For every large size application we do chunking of the code..ex: In make my trip , For flights one bundle of js is loaded , for trains another bundle of code is loaded etc...


Like in iterview , 

we need to tell , we compress the images and put it in cdn , we use caching , we use optimization of the code , we use bundling ..and all other things to make application as performant.


//default Import
/***** 
 * import { Title } from './components/Header'
 * /

/***
 *  - Header
 *      - logo(Title)
 *       - delivery location(optional)
 *        - nav Items(right)
 *         - cart
 *  - Body
 *      - Search Bar
 *    - Reastaturant list
 *         - Reastaurant Card(Information -- Many Cards)
 *              -Image
 *              -Name
 *              - Rating
 *              -cusines(food varieties)
 *
 *
 *    - Footer
 *      -- links
 *      -- social Icons
 *      -- copyright
 *
 */

// React.createElement ==> Object ==> render HTML(DOM)
// Key and Id is different : React keeps track of key to comapre the elements

// config Driven UI:


TRY to do custom hook like useState --> return an array 

const [getLoacalStorage , setLocalStorage] = useLocalStorage();
why React is so fast?

1) Virtual DOM --> representation of actual DOM(at the end of the day it is object)
2) Reconcilation --> it is the process which uses diff algorithm to know what is difference between 2 trees(virtual DOM and actual DOM) and update in on UI 
3) Diff Algorithm --> algorithm --> the current tree is compared by changed tree and react updates only required node and re-render page to update only specific portion on UI

when the data change from one state to another state --> react quickly calucates the difference between objects and it quickly updates to required node--> it is nothing but  DOM manipulation --> it is very fast.

Core of React --> super poweful Diff algorithm--> fast DOM manipulation

Expensive Operation --> DOM manipulation --> react does it very fast bcz of that react is fast.
It compares 2 trees and updates only which is required(difference between 2 trees) on UI
React Fiber --> It is new feature of Reconcilation which is used by react 

React doesn't  track the  normal variables , it only tracks local state variable --> that is the reason we use state variable --> we use useState to define the state.

whenver the state changes react re-renders(something refreshes) component and change only the required part.


Microservices:

Authentication and Autorization --> Authentication is userName and pwd(Login and Logout) and Authorization is checking the roles , for which application the user has access to view/edit/read pages


2methods to call API 

1st method: --> 
when users loads the page --> call the api --> render page 
                                (takes 300 ms) --> updated UI in 500ms

2nd Method -->

when user loads the page --> render intial page on UI --> call the API --> update UI --> (BEST MEthod to use it for better user experience) 

useEffect(is the best hook on react) --> it is called only one time if it has dependency array as EMPTY
if we don't use dependency array it will be called every render--> not feasible and not performant

so it is very importnant to add dependency array on useEffect that is why we use it to fetch the data and update the state.

--> useEffect is called after initial render

empty dependency render --> once after render
dependency array [searchTxt] --> it is called after intial render + it is called after every render when state of searchTxt input change

//Conditional Rendering

  // IF restaurant is empty --> Shimmer UI
  // If restaurant has data --> Load actual data


How do you Avoid render a component 

we can use below code
  if(!allRestaurantData) return null;

  OR 
  we can use optional chaining to avoid error at the early stage of defining variable 

  allRestaurantData?.data

grid -area property
  grid-row-start / grid-column-start / grid-row-end / grid-column-end.

  Use the grid-column property to specify where to place an item.

Item1 will start on column 1 and end before column 5: -- > 1 / 5

1 / span 5 --> it will span till 5 columns

{} --> In the curly braces we can write JS expressions not JS statements

Ex:
{
let a=10;
console.log(a);
} --> THis is not allowed --> bcz it is 2 js statements

{
    ((a=10) , console.log(a)) --> this can be done bcz it becomes JS expressions.
}
